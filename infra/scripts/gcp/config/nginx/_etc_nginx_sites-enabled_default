# Redirect all HTTP traffic to HTTPS
server {
    listen 80;
    server_name smartbike.website;  # Using _ to catch all requests, or you can use your public IP

    # Redirect to HTTPS
    return 301 https://$host$request_uri;
}

# SSL-enabled server block
server {
    listen 443 ssl;
    server_name smartbike.website;  # Using _ to catch all requests, or use your public IP

    # SSL certificate paths for self-signed or Let's Encrypt
    ssl_certificate /etc/letsencrypt/live/smartbike.website/fullchain.pem;  # Update with your actual certificate
    ssl_certificate_key /etc/letsencrypt/live/smartbike.website/privkey.pem;  # Update with your actual key

    # SSL options
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "HIGH:!aNULL:!MD5";

    # Proxy requests to the Dockerized application running on port 8080
    location / {
        proxy_pass http://localhost:8080;  # Adjust to your Docker container's port
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Optional security headers (best practices)
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
}